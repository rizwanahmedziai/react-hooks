{"ast":null,"code":"var _jsxFileName = \"F:\\\\Projects\\\\React\\\\pluralsight\\\\using-react-hooks\\\\project\\\\react-hooks\\\\src\\\\ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from 'react';\n\nvar ImageToggleOnScroll = function ImageToggleOnScroll(_ref) {\n  var primaryImage = _ref.primaryImage,\n      secondaryImage = _ref.secondaryImage;\n  var imageRef = useRef(null);\n\n  var _useState = useState(true),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  useEffect(function () {\n    window.addEventListener('scroll', scrollHandler);\n    setInView(isInView);\n    setIsLoading(false);\n    return function () {\n      window.removeEventListener('scroll', scrollHandler);\n    };\n  });\n\n  var _useState2 = useState(false),\n      inView = _useState2[0],\n      setInView = _useState2[1];\n\n  var isInView = function isInView() {\n    if (imageRef.current) {\n      var rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  var scrollHandler = function scrollHandler() {\n    setInView(function () {\n      return isInView();\n    });\n  };\n\n  return __jsx(\"img\", {\n    src: inView ? secondaryImage : primaryImage,\n    alt: \"\",\n    ref: imageRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["F:/Projects/React/pluralsight/using-react-hooks/project/react-hooks/src/ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageToggleOnScroll","primaryImage","secondaryImage","imageRef","isLoading","setIsLoading","window","addEventListener","scrollHandler","setInView","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAsC;AAAA,MAAnCC,YAAmC,QAAnCA,YAAmC;AAAA,MAArBC,cAAqB,QAArBA,cAAqB;AACjE,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;;AADiE,kBAE/BE,QAAQ,CAAC,IAAD,CAFuB;AAAA,MAE1DK,SAF0D;AAAA,MAE/CC,YAF+C;;AAIjEP,EAAAA,SAAS,CAAC,YAAM;AACfQ,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACAC,IAAAA,SAAS,CAACC,QAAD,CAAT;AACAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAO,YAAM;AACZC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACA,KAFD;AAGA,GAPQ,CAAT;;AAJiE,mBAarCT,QAAQ,CAAC,KAAD,CAb6B;AAAA,MAa1Da,MAb0D;AAAA,MAalDH,SAbkD;;AAejE,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACtB,QAAIP,QAAQ,CAACU,OAAb,EAAsB;AACrB,UAAMC,IAAI,GAAGX,QAAQ,CAACU,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACA;;AACD,WAAO,KAAP;AACA,GAND;;AAQA,MAAMV,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC3BC,IAAAA,SAAS,CAAC,YAAM;AACf,aAAOC,QAAQ,EAAf;AACA,KAFQ,CAAT;AAGA,GAJD;;AAMA,SACC;AAAK,IAAA,GAAG,EAAEE,MAAM,GAAGV,cAAH,GAAoBD,YAApC;AAAkD,IAAA,GAAG,EAAC,EAAtD;AAAyD,IAAA,GAAG,EAAEE,QAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD;AAGA,CAhCD;;AAkCA,eAAeH,mBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\n\r\nconst ImageToggleOnScroll = ({ primaryImage, secondaryImage }) => {\r\n\tconst imageRef = useRef(null);\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener('scroll', scrollHandler);\r\n\t\tsetInView(isInView);\r\n\t\tsetIsLoading(false);\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('scroll', scrollHandler);\r\n\t\t};\r\n\t});\r\n\r\n\tconst [inView, setInView] = useState(false);\r\n\r\n\tconst isInView = () => {\r\n\t\tif (imageRef.current) {\r\n\t\t\tconst rect = imageRef.current.getBoundingClientRect();\r\n\t\t\treturn rect.top >= 0 && rect.bottom <= window.innerHeight;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tconst scrollHandler = () => {\r\n\t\tsetInView(() => {\r\n\t\t\treturn isInView();\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<img src={inView ? secondaryImage : primaryImage} alt='' ref={imageRef} />\r\n\t);\r\n};\r\n\r\nexport default ImageToggleOnScroll;\r\n"]},"metadata":{},"sourceType":"module"}