{"ast":null,"code":"var _jsxFileName = \"F:\\\\Projects\\\\React\\\\pluralsight\\\\using-react-hooks\\\\project\\\\react-hooks\\\\src\\\\ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from 'react';\n\nconst ImageToggleOnScroll = ({\n  primaryImage,\n  secondaryImage\n}) => {\n  const imageRef = useRef(null);\n  useEffect(() => {\n    window.addEventListener('scroll', scrollHandler);\n  });\n  const {\n    0: inView,\n    1: setInView\n  } = useState(false);\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  };\n\n  return __jsx(\"img\", {\n    src: primaryImage,\n    alt: \"\",\n    ref: imageRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["F:/Projects/React/pluralsight/using-react-hooks/project/react-hooks/src/ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageToggleOnScroll","primaryImage","secondaryImage","imageRef","window","addEventListener","scrollHandler","inView","setInView","isInView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAAsC;AACjE,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACfM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACA,GAFQ,CAAT;AAIA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBT,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMU,QAAQ,GAAG,MAAM;AACtB,QAAIN,QAAQ,CAACO,OAAb,EAAsB;AACrB,YAAMC,IAAI,GAAGR,QAAQ,CAACO,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeV,MAAM,CAACW,WAA9C;AACA;;AACD,WAAO,KAAP;AACA,GAND;;AAQA,QAAMT,aAAa,GAAG,MAAM;AAC3BE,IAAAA,SAAS,CAAC,MAAM;AACf,aAAOC,QAAQ,EAAf;AACA,KAFQ,CAAT;AAGA,GAJD;;AAMA,SAAO;AAAK,IAAA,GAAG,EAAER,YAAV;AAAwB,IAAA,GAAG,EAAC,EAA5B;AAA+B,IAAA,GAAG,EAAEE,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CAxBD;;AA0BA,eAAeH,mBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\n\r\nconst ImageToggleOnScroll = ({ primaryImage, secondaryImage }) => {\r\n\tconst imageRef = useRef(null);\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener('scroll', scrollHandler);\r\n\t});\r\n\r\n\tconst [inView, setInView] = useState(false);\r\n\r\n\tconst isInView = () => {\r\n\t\tif (imageRef.current) {\r\n\t\t\tconst rect = imageRef.current.getBoundingClientRect();\r\n\t\t\treturn rect.top >= 0 && rect.bottom <= window.innerHeight;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tconst scrollHandler = () => {\r\n\t\tsetInView(() => {\r\n\t\t\treturn isInView();\r\n\t\t});\r\n\t};\r\n\r\n\treturn <img src={primaryImage} alt='' ref={imageRef} />;\r\n};\r\n\r\nexport default ImageToggleOnScroll;\r\n"]},"metadata":{},"sourceType":"module"}